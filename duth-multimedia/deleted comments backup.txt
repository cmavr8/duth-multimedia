case CV_EVENT_RBUTTONDOWN:
	//	printf("RBUTTONDOWN\n");
		break;

	case CV_EVENT_FLAG_CTRLKEY:
	//	printf("FLAG_LBUTTONDBLCLK\n");
		break;



void mouseHandlerr(int event,int u,int v,int flags,void* param){
	double X, Y, Z, S;
	//Form1  myform = (Form1^) param;
	//Form1 myform;
	//myform = param;
	//myform->FramesToSkip->Text = L"33";
	//S = System::Int32::Parse(this->Scale->Text);
	//n_boards = System::Int32::Parse(this->NoOfFrames->Text);
	switch( event ){
	case CV_EVENT_LBUTTONDOWN:



this->status->Text = "Corrected display running...";
			// S = System::Int32::Parse(this->Scale->Text); //Save Scale to global var S
			 //Sample: load the matrices from the file
			 CvMat *intrinsic = (CvMat*)cvLoad("Intrinsics.xml");


for(int i=0; i<successes; ++i)
			 { 
				  CV_MAT_ELEM( *point_counts2, int, i, 0)= CV_MAT_ELEM( *point_counts, int, i, 0);   
						 //These are all the same number
			 }



CV_MAT_ELEM(*point_counts, int,successes,0) = board_total;    
			   successes++;
			//   printf("\r%d successful Snapshots out of %d collected.",successes,n_boards);
			   }




CvMat* distortion_coeffs = cvCreateMat(4,1,CV_32FC1);
 
			 //Note:
			 //Intrinsic Matrix - 3x3 (aka a matrix") Lens Distorstion Matrix - 4x1
			 // [fx 0 cx]              [k1 k2 p1 p2   k3(optional)]
			 // [0 fy cy]
			 // [0  0  1]
 
 
			 CvPoint2D32f* corners = new CvPoint2D32f[ board_total ];


 if(!capture) 
			 { 
		//	  printf("\nCouldn't open the camera\n"); 
		//	  return -1;
			 }



int width,height;//width and height of camera
		//double S; //Scale factor, read from GUI
	private: System::Windows::Forms::TextBox^  fx;










capture = cvCreateCameraCapture( 0 );
			 if(!capture) 
			 { 
		//	  TODO uncomment below:
		//	  return -1;
			 }
			 width = (int) cvGetCaptureProperty(capture,CV_CAP_PROP_FRAME_WIDTH);






